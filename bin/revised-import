#!/usr/bin/env perl
use v5.16;
use FindBin;
use lib "$FindBin::Bin/../lib";

use File::Slurp qw(read_file);
use JSON;
use Esmoe::ES;

my $ES_TRANSPORT = "httptiny";

eval {
    require ElasticSearch::Transport::Curl;
    $ES_TRANSPORT = "curl";
    1;
} or do {
    # nothing
};

my $json_file = shift(@ARGV) || die "$0 </path/to/dict-revised.json>\n";

my $json_text = read_file($json_file, { binmode => ":utf8" });

my $json_decoder = JSON->new;
my $dict_revised = $json_decoder->decode($json_text);

for (@$dict_revised) {
    es_index($_);
}
es_index(undef);

sub es_index {
    state $es = Esmoe::ES->new( no_refresh => 1, transport => $ES_TRANSPORT );
    state $buffered = [];
    state $id = 1;

    unless ($es->index_exists(index => "moedict")) {
        $es->create_index(
            index => "moedict",
            settings => {
                index => {
                    number_of_replicas => 0
                }
            },
            mappings => {
                revised => {
                    _id => {
                        path => "title"
                    },
                    properties => {
                        title        => { type => "string",  index => "not_analyzed" },
                        radical      => { type => "string",  index => "not_analyzed" },
                        stroke_count => { type => "integer" },
                    }
                }
            }
        );
    }

    my $doc = shift;
    if (!defined($doc) || @$buffered > 1000) {
        $es->bulk(
            index => "moedict",
            type => "revised",
            actions => [
                map {
                    +{
                        index => {
                            data => $_
                        }
                    }
                }
                @$buffered
            ]
        );

        @$buffered = ();
    }
    push @$buffered, $doc;
}
